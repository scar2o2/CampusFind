import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
serve(async (req)=>{
  // Handle CORS preflight
  if (req.method === "OPTIONS") {
    return new Response(JSON.stringify({
      status: "ok"
    }), {
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "POST, OPTIONS",
        "Access-Control-Allow-Headers": "authorization, content-type",
        "Content-Type": "application/json"
      }
    });
  }
  // Initialize Supabase client with service role key
  const supabase = createClient(Deno.env.get("SUPABASE_URL"), Deno.env.get("SUPABASE_SERVICE_ROLE_KEY"));
  try {
    const body = await req.json();
    const { id: foundItemId, category, foundDate, userId: foundUserId } = body.record;
    // 1️⃣ Fetch matching lost items
    const { data: lostItems, error: lostError } = await supabase.from("lost_items").select("*").eq("category", category).lte("lostDate", foundDate);
    if (lostError) throw lostError;
    if (!lostItems || lostItems.length === 0) {
      return new Response(JSON.stringify({
        success: true,
        message: "No matches found",
        created: []
      }), {
        headers: {
          "Content-Type": "application/json"
        }
      });
    }
    // 2️⃣ Prepare notifications, avoiding duplicates
    const createdNotifications = [];
    for (const lostItem of lostItems){
      // Check if notification already exists
      const { data: existing, error: checkError } = await supabase.from("notifications2").select("*").eq("userid", foundUserId).eq("founditemid", foundItemId).eq("lostitemid", lostItem.id).single();
      if (checkError && checkError.code !== "PGRST116") throw checkError;
      if (!existing) {
        const message = `A potential match found for your found item "${body.record.name}" (Category: ${category})`;
        const { data: newNotif, error: insertError } = await supabase.from("notifications2").insert({
          userid: foundUserId,
          lostitemid: lostItem.id,
          founditemid: foundItemId,
          message,
          type: "found"
        }).select().single();
        if (insertError) throw insertError;
        createdNotifications.push(newNotif);
      }
    }
    return new Response(JSON.stringify({
      success: true,
      message: `Created ${createdNotifications.length} new notifications.`,
      created: createdNotifications
    }), {
      headers: {
        "Content-Type": "application/json"
      }
    });
  } catch (error) {
    console.error("Edge Function Error:", error);
    return new Response(JSON.stringify({
      success: false,
      error: error.message
    }), {
      status: 500,
      headers: {
        "Content-Type": "application/json"
      }
    });
  }
});
